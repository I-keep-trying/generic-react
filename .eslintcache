[{"C:\\Users\\Owner\\webdev\\generic-react\\src\\index.js":"1","C:\\Users\\Owner\\webdev\\generic-react\\src\\App.js":"2"},{"size":214,"mtime":1607362137467,"results":"3","hashOfConfig":"4"},{"size":3734,"mtime":1607810267358,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w32rnj",{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"C:\\Users\\Owner\\webdev\\generic-react\\src\\index.js",[],"C:\\Users\\Owner\\webdev\\generic-react\\src\\App.js",["11"],"import React, { useState } from 'react'\r\n//import './App.css'\r\n\r\n// functionality demo: https://codewordsolver.com/\r\n\r\nconst stringArray = [\r\n  { word: 'bassoon', score: 371 },\r\n  { word: 'barroon', score: 371 },\r\n  { word: 'babboon', score: 371 },\r\n]\r\n\r\nconst App = () => {\r\n  const [results, setResults] = useState([])\r\n  const [n, setN] = useState([])\r\n  const [m, setM] = useState([])\r\n  const input = '1a1122n'\r\n\r\n  const getPlaceholders = (arr) => {\r\n    const x = [...arr.matchAll(/\\d/g)]\r\n    setN(\r\n      x.map((item) => {\r\n        const findPlaceholders = [...arr.match(item[0])]\r\n        const itemObj = {\r\n          placeholder: findPlaceholders[0],\r\n          index: item.index,\r\n        }\r\n        return itemObj\r\n      })\r\n    )\r\n  }\r\n\r\n  const getWordMatches = (arr) => {\r\n    const words = arr.map((obj) => {\r\n      console.log('word', obj.word, 'n', n)\r\n      let testWord = input\r\n\r\n      for (const c in n) {\r\n        console.log('c', c, 'n[c]', n[c])\r\n        let charWord = obj.word.charAt(n[c].index)\r\n        console.log('char', charWord)\r\n        let charInput = testWord.charAt(n[c].index)\r\n        console.log('charInput', charInput)\r\n        console.log('----------------------------')\r\n      }\r\n\r\n      return obj.word\r\n    })\r\n    setM((state) => [...state, ...words])\r\n  }\r\n  /*  console.log('n', n)\r\n [\"1\", index: 0, input: \"1a1122n\", groups: undefined]\r\n [\"1\", index: 2, input: \"1a1122n\", groups: undefined]\r\n [\"1\", index: 3, input: \"1a1122n\", groups: undefined]\r\n [\"2\", index: 4, input: \"1a1122n\", groups: undefined]\r\n [\"2\", index: 5, input: \"1a1122n\", groups: undefined]\r\n */\r\n  console.log('m', m)\r\n\r\n  /*   const compareWords = (arr1, arr2) => {\r\n    arr2.map((obj) => {\r\n      obj.word.split('').forEach((targetLetter, i) => {\r\n        arr1.split('').map((inputLetter, index) => {\r\n          if (!obj.word.includes(inputLetter) && i === index) {\r\n            let p = [...input.matchAll(inputLetter)]\r\n            console.log('p', p)\r\n            const inputCount = input.split(index).length - 1\r\n            const letterCount = obj.word.split(obj.word.charAt(index)) - 1\r\n\r\n            if (inputCount !== letterCount) {\r\n              setResults(\r\n                stringArray.filter((result) => {\r\n                  // console.log('setResults filter', result)\r\n                  // WHY WHY WHY WHY why is this happening when the condition is not met??????????????????\r\n                  // I know why now, because it's looping and some loops DO meet the condition\r\n                  return result === obj.word ? null : result\r\n                })\r\n              )\r\n            }\r\n\r\n            const testWord = input.replaceAll(inputLetter, targetLetter)\r\n            console.log('testWord', testWord)\r\n            if (input === obj.word) {\r\n              console.log('testWord === obj.word')\r\n            }\r\n\r\n            console.log('---------------------')\r\n          }\r\n          return inputLetter\r\n        })\r\n      })\r\n      return obj.word\r\n    })\r\n  } */\r\n\r\n  console.log('results', results)\r\n\r\n  /*   const handleClick = () => {\r\n    compareWords(input, stringArray)\r\n  } */\r\n\r\n  const handleClick2 = () => {\r\n    getPlaceholders(input)\r\n  }\r\n\r\n  const handleClick3 = () => {\r\n    getWordMatches(stringArray)\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <button onClick={handleClick2}>get matches</button>\r\n      <button onClick={handleClick3}>get words</button>\r\n      {JSON.stringify(n)}\r\n\r\n      <br />\r\n      <div>\r\n        {m.map((word) => (\r\n          <div> {word} </div>\r\n        ))}\r\n      </div>\r\n\r\n      <br />\r\n      {/*     <button onClick={handleClick}>compare</button> */}\r\n      <br />\r\n\r\n      {JSON.stringify(results)}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n",{"ruleId":"12","severity":1,"message":"13","line":13,"column":19,"nodeType":"14","messageId":"15","endLine":13,"endColumn":29},"no-unused-vars","'setResults' is assigned a value but never used.","Identifier","unusedVar"]